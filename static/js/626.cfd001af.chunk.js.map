{"version":3,"file":"static/js/626.cfd001af.chunk.js","mappings":"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","sources":["api/api-client.js","state/atoms.js","utils/index.js","components/Badge/index.js","components/PokemonDetails/PokemonType/index.js","components/Card/index.js","components/PokemonDetails/PokemonStats/PokemonStatsCard/index.js","components/PokemonDetails/PokemonStats/index.js","components/PokemonDetails/index.js","components/Header/index.js","components/Popup/index.js","components/List/index.js","containers/App.js"],"sourcesContent":["const apiClient = {\n  get: async (url) => {\n    return fetch(url).then(async (response) => {\n      const data = await response.json();\n      return response.ok ? data : Promise.reject(data);\n    });\n  },\n  // post/put/delete not needed currently\n};\n\nexport default apiClient;\n","import { atom } from 'jotai';\nimport apiClient from 'api/api-client';\n\nexport const asyncPokemonListAtom = atom(async () => {\n  const response = await apiClient.get(`${process.env.REACT_APP_POKE_API_BASE_URL}?limit=151`);\n  const pokemonList = await Promise.all(response.results.map((item) => apiClient.get(item.url)));\n  return pokemonList;\n});\n\nexport const selectedPokemonAtom = atom({});\n\nexport const isPopupVisibleAtom = atom(false);\n","export const padString = (value, targetLength = 3, charToPad = '0', padPosition = 'start') => {\n  const str = value.toString();\n  const methodName = padPosition === 'start' ? 'padStart' : 'padEnd';\n  return str[methodName](targetLength, charToPad);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Badge = (props) => {\n  const badgeSize = { large: 'f4', medium: 'f5', small: 'f6' };\n\n  return (\n    <div\n      className={`ma1 ph2 pv1 br2 ${badgeSize[props.size] ?? 'f6'} ${props.backgroundColor}`}\n      style={props.badgeStyle}\n    >\n      {props.label}\n    </div>\n  );\n};\n\nBadge.propTypes = {\n  size: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  label: PropTypes.string,\n  badgeStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n};\n\nexport default Badge;\n","import React from 'react';\nimport { useAtomValue } from 'jotai';\nimport { selectedPokemonAtom } from 'state/atoms';\nimport Badge from 'components/Badge';\n\nconst POKEMON_TYPE_COLOR = {\n  normal: 'bg-moon-gray',\n  fire: 'bg-orange near-white',\n  water: 'bg-light-blue',\n  grass: 'bg-green near-white',\n  electric: 'bg-yellow',\n  ice: 'bg-lightest-blue',\n  fighting: 'bg-dark-red near-white',\n  poison: 'bg-light-purple near-white',\n  ground: 'bg-gold',\n  flying: 'bg-blue near-white',\n  psychic: 'bg-hot-pink near-white',\n  bug: 'bg-light-green',\n  rock: 'bg-light-yellow',\n  ghost: 'bg-purple near-white',\n  dark: 'bg-mid-gray near-white',\n  dragon: 'bg-dark-blue near-white',\n  steel: 'bg-silver near-white',\n  fairy: 'bg-light-pink',\n};\n\nconst PokemonType = () => {\n  const selectedPokemon = useAtomValue(selectedPokemonAtom);\n\n  return (\n    <div className=\"flex flex-wrap justify-center\">\n      {\n        selectedPokemon.types.map(({ type }) => (\n          <Badge\n            key={type.name}\n            label={type.name}\n            backgroundColor={POKEMON_TYPE_COLOR[type.name]}\n          />\n        ))\n      }\n    </div>\n  );\n};\n\nexport default PokemonType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst arePropsEqual = (prevProps, nextProps) => (\n  prevProps.title === nextProps.title && prevProps.subtitle === nextProps.subtitle\n);\n\nconst Card = (props) => {\n  const renderTitle = () => (\n    <h1 className=\"code f4 ttc bg-red washed-yellow ma0 pv1 br2 br--top\" style={props.titleStyle}>\n      {props.title}\n      {\n        props.subtitle && (\n          <span className=\"courier f6 db\" style={props.subtitleStyle}>\n            {props.subtitle}\n          </span>\n        )\n      }\n    </h1>\n  );\n\n  const renderImage = () => (\n    props.imageSource && (\n      <img\n        src={props.imageSource}\n        className=\"db center mt1 ph1 h5 w5\"\n        style={props.imageStyle}\n        alt=\"pokemon\"\n      />\n    )\n  );\n\n  const renderContent = () => (\n    props.children ? props.children : <p style={props.textContentStyle}>{props.textContent}</p>\n  );\n\n  return (\n    <div className=\"mh1 mv3\" style={props.containerStyle} onClick={props.onClickHandler}>\n      <div className=\"tc bg-washed-yellow br2 shadow-5\" style={props.contentContainerStyle}>\n        {renderTitle()}\n        {renderImage()}\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  imageSource: PropTypes.string,\n  textContent: PropTypes.string,\n  onClickHandler: PropTypes.func,\n  children: PropTypes.element,\n  titleStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  subtitleStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  imageStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  textContentStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  containerStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  contentContainerStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n};\n\nexport default React.memo(Card, arePropsEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'components/Card';\n\nconst PokemonStatsCard = ({ title, fields }) => (\n  <Card title={title} >\n    <ul className=\"bg-white list ma0 pl0\">\n      {\n        fields.map((field) => (\n          <li key={field.label} className=\"pa2\">\n            <span className=\"fw6\">{field.label}:</span> {field.value}\n          </li>\n        ))\n      }\n    </ul>\n  </Card>\n);\n\nPokemonStatsCard.propTypes = {\n  title: PropTypes.string,\n  fields: PropTypes.array,\n};\n\nexport default PokemonStatsCard;\n","import React from 'react';\nimport { useAtomValue } from 'jotai';\nimport { selectedPokemonAtom } from 'state/atoms';\nimport PokemonStatsCard from './PokemonStatsCard';\n\nconst PokemonStats = () => {\n  const selectedPokemon = useAtomValue(selectedPokemonAtom);\n\n  return (\n    <div className=\"w-70-ns center-ns ph2 pa0-ns f6\">\n      <PokemonStatsCard\n        title=\"Profile\"\n        fields={[\n          { label: 'weight', value: `${selectedPokemon.weight / 10}kg` },\n          { label: 'height', value: `${selectedPokemon.height / 10}m` },\n          {\n            label: 'abilities',\n            value: selectedPokemon.abilities.map((ability) => ability.ability.name).join(', '),\n          },\n        ]}\n      />\n\n      <PokemonStatsCard\n        title=\"Base Stats\"\n        fields={selectedPokemon.stats.map((item) => ({\n          label: item.stat.name, value: item.base_stat,\n        }))}\n      />\n    </div>\n  );\n};\n\nexport default PokemonStats;\n","import React from 'react';\nimport { useAtomValue, useSetAtom } from 'jotai';\nimport { isPopupVisibleAtom, selectedPokemonAtom } from 'state/atoms';\nimport { padString } from 'utils';\nimport PokemonType from './PokemonType';\nimport PokemonStats from './PokemonStats';\n\nconst PokemonDetails = () => {\n  const selectedPokemon = useAtomValue(selectedPokemonAtom);\n  const setIsPopupVisible = useSetAtom(isPopupVisibleAtom);\n  const selectedPokemonId = padString(selectedPokemon.id);\n  const hidePopup = () => setIsPopupVisible(false);\n\n  return (\n    <div className=\"tc ttc ph2 pt3\">\n      <button\n        className=\"absolute top-0 right-0 mt2 mr2 fw6 ba br-100 b--black-10 bg-dark-gray near-white dim pointer\"\n        onClick={hidePopup}\n      >\n        &times;\n      </button>\n\n      <img\n        src={`${process.env.REACT_APP_POKE_IMG_BASE_URL}/${selectedPokemonId}.png`}\n        alt=\"pokemon\"\n        className=\"h5-l w5-l bg-near-white br-100 shadow-1\"\n      />\n\n      <h1 className=\"code ma0 f2\">\n        {selectedPokemon.name}\n        <span className=\"courier f5 db\">#{selectedPokemonId}</span>\n      </h1>\n\n      <PokemonType />\n      <PokemonStats />\n    </div>\n  );\n};\n\nexport default PokemonDetails;\n","import React from 'react';\n\nconst Header = () => (\n  <header>\n    <div className=\"bg-near-black\">\n      <nav className=\"flex flex-wrap items-center justify-between pa3\">\n        <a href=\"/\" className=\"ph2 ml2-m ml3-l f3 fw6 near-white no-underline ba bw2 br4\">\n          Pokédex\n        </a>\n        <a\n          className=\"mr2-m mr3-l f6 fw4 near-white no-underline dim\"\n          href={process.env.REACT_APP_GITHUB_REPO_URL}\n          target=\"blank\"\n        >\n          About\n        </a>\n      </nav>\n    </div>\n  </header>\n);\n\nexport default React.memo(Header);\n","import React from 'react';\nimport Modal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport { useAtomValue } from 'jotai';\nimport { isPopupVisibleAtom } from 'state/atoms';\n\nModal.setAppElement('#root');\n\nconst Popup = (props) => {\n  const handleAfterOpen = () => document.body.style.overflow = 'hidden';\n  const handleAfterClose = () => document.body.style.overflow = 'auto';\n  const isPopupVisible = useAtomValue(isPopupVisibleAtom);\n\n  return (\n    <Modal\n      isOpen={isPopupVisible}\n      onAfterOpen={handleAfterOpen}\n      onAfterClose={handleAfterClose}\n      className=\"absolute top-0 left-0 bottom-0 right-0 top-2-ns left-2-ns bottom-2-ns right-2-ns\n        w-70-m w-50-l center-ns overflow-y-auto bg-washed-yellow br2\"\n    >\n      {props.children}\n    </Modal>\n  );\n};\n\nPopup.propTypes = {\n  children: PropTypes.element,\n};\n\nexport default Popup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst List = (props) => {\n  return (\n    <div className=\"flex flex-wrap justify-around\" style={props.listContainerStyle}>\n      {props.dataSource.map((data, index) => props.renderItem(data, index))}\n    </div>\n  );\n};\n\nList.propTypes = {\n  renderItem: PropTypes.func,\n  dataSource: PropTypes.array,\n  listContainerStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n};\n\nexport default List;\n","import React from 'react';\nimport { useAtomValue, useSetAtom } from 'jotai';\nimport { selectedPokemonAtom, asyncPokemonListAtom, isPopupVisibleAtom } from 'state/atoms';\nimport PokemonDetails from 'components/PokemonDetails';\nimport { padString } from 'utils';\nimport Header from 'components/Header';\nimport Popup from 'components/Popup';\nimport List from 'components/List';\nimport Card from 'components/Card';\n\nfunction App() {\n  const pokemonList = useAtomValue(asyncPokemonListAtom);\n  const setSelectedPokemon = useSetAtom(selectedPokemonAtom);\n  const setIsPopupVisible = useSetAtom(isPopupVisibleAtom);\n\n  const showSelectedPokemon = (data) => () => {\n    setSelectedPokemon(data);\n    setIsPopupVisible(true);\n  };\n\n  const renderItem = (data) => {\n    const id = padString(data.id);\n\n    return (\n      <div key={data.name + id} className=\"grow pointer\">\n        <Card\n          title={data.name}\n          subtitle={`#${id}`}\n          imageSource={`${process.env.REACT_APP_POKE_IMG_BASE_URL}/${id}.png`}\n          onClickHandler={showSelectedPokemon(data)}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Header />\n      <Popup>\n        <PokemonDetails />\n      </Popup>\n\n      <List dataSource={pokemonList} renderItem={renderItem} />\n    </>\n  );\n}\n\nexport default App;\n"],"names":["apiClient","get","_get","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","url","wrap","_context2","prev","next","abrupt","fetch","then","_ref","_callee","response","data","_context","json","sent","ok","Promise","reject","stop","_x2","apply","arguments","_x","asyncPokemonListAtom","atom","pokemonList","concat","process","all","results","map","item","selectedPokemonAtom","isPopupVisibleAtom","padString","value","targetLength","length","undefined","charToPad","padPosition","toString","props","_badgeSize$props$size","_jsx","className","large","medium","small","size","backgroundColor","style","badgeStyle","children","label","POKEMON_TYPE_COLOR","normal","fire","water","grass","electric","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dark","dragon","steel","fairy","selectedPokemon","useAtomValue","types","type","Badge","name","arePropsEqual","prevProps","nextProps","title","subtitle","Card","containerStyle","onClick","onClickHandler","_jsxs","contentContainerStyle","titleStyle","subtitleStyle","imageSource","src","imageStyle","alt","textContentStyle","textContent","displayName","React","fields","field","PokemonStatsCard","weight","height","abilities","ability","join","stats","stat","base_stat","setIsPopupVisible","useSetAtom","selectedPokemonId","id","PokemonType","PokemonStats","Header","href","target","Modal","isPopupVisible","isOpen","onAfterOpen","document","body","overflow","onAfterClose","listContainerStyle","dataSource","index","renderItem","setSelectedPokemon","showSelectedPokemon","_Fragment","Popup","PokemonDetails","List"],"sourceRoot":""}