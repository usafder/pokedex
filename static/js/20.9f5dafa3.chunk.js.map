{"version":3,"file":"static/js/20.9f5dafa3.chunk.js","mappings":"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","sources":["components/Card/index.js","components/Badge/index.js","components/PokemonDetails/PokemonType/index.js","components/PokemonDetails/PokemonStats/PokemonStatsCard/index.js","components/PokemonDetails/PokemonStats/index.js","components/PokemonDetails/index.js","api/api-client.js","state/atoms.js","utils/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst arePropsEqual = (prevProps, nextProps) => (\n  prevProps.title === nextProps.title && prevProps.subtitle === nextProps.subtitle\n);\n\nconst Card = (props) => {\n  const renderTitle = () => (\n    <h1 className=\"code f4 ttc bg-red washed-yellow ma0 pv1 br2 br--top\" style={props.titleStyle}>\n      {props.title}\n      {\n        props.subtitle && (\n          <span className=\"courier f6 db\" style={props.subtitleStyle}>\n            {props.subtitle}\n          </span>\n        )\n      }\n    </h1>\n  );\n\n  const renderImage = () => (\n    props.imageSource && (\n      <img\n        src={props.imageSource}\n        className=\"db center mt1 ph1 h5 w5\"\n        style={props.imageStyle}\n        alt=\"pokemon\"\n      />\n    )\n  );\n\n  const renderContent = () => (\n    props.children ? props.children : <p style={props.textContentStyle}>{props.textContent}</p>\n  );\n\n  return (\n    <div className=\"mh1 mv3\" style={props.containerStyle} onClick={props.onClickHandler}>\n      <div className=\"tc bg-washed-yellow br2 shadow-5\" style={props.contentContainerStyle}>\n        {renderTitle()}\n        {renderImage()}\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  imageSource: PropTypes.string,\n  textContent: PropTypes.string,\n  onClickHandler: PropTypes.func,\n  children: PropTypes.element,\n  titleStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  subtitleStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  imageStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  textContentStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  containerStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n  contentContainerStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n};\n\nexport default React.memo(Card, arePropsEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Badge = (props) => {\n  const badgeSize = { large: 'f4', medium: 'f5', small: 'f6' };\n\n  return (\n    <div\n      className={`ma1 ph2 pv1 br2 ${badgeSize[props.size] ?? 'f6'} ${props.backgroundColor}`}\n      style={props.badgeStyle}\n    >\n      {props.label}\n    </div>\n  );\n};\n\nBadge.propTypes = {\n  size: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  label: PropTypes.string,\n  badgeStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number\n  ]),\n};\n\nexport default Badge;\n","import React from 'react';\nimport { useAtomValue } from 'jotai';\nimport { selectedPokemonAtom } from 'state/atoms';\nimport Badge from 'components/Badge';\n\nconst POKEMON_TYPE_COLOR = {\n  normal: 'bg-moon-gray',\n  fire: 'bg-orange near-white',\n  water: 'bg-light-blue',\n  grass: 'bg-green near-white',\n  electric: 'bg-yellow',\n  ice: 'bg-lightest-blue',\n  fighting: 'bg-dark-red near-white',\n  poison: 'bg-light-purple near-white',\n  ground: 'bg-gold',\n  flying: 'bg-blue near-white',\n  psychic: 'bg-hot-pink near-white',\n  bug: 'bg-light-green',\n  rock: 'bg-light-yellow',\n  ghost: 'bg-purple near-white',\n  dark: 'bg-mid-gray near-white',\n  dragon: 'bg-dark-blue near-white',\n  steel: 'bg-silver near-white',\n  fairy: 'bg-light-pink',\n};\n\nconst PokemonType = () => {\n  const selectedPokemon = useAtomValue(selectedPokemonAtom);\n\n  return (\n    <div className=\"flex flex-wrap justify-center\">\n      {\n        selectedPokemon.types.map(({ type }) => (\n          <Badge\n            key={type.name}\n            label={type.name}\n            backgroundColor={POKEMON_TYPE_COLOR[type.name]}\n          />\n        ))\n      }\n    </div>\n  );\n};\n\nexport default PokemonType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'components/Card';\n\nconst PokemonStatsCard = ({ title, fields }) => (\n  <Card title={title} >\n    <ul aria-label={title} className=\"bg-white list ma0 pl0\">\n      {\n        fields.map((field) => (\n          <li key={field.label} aria-label={field.label} className=\"pa2\">\n            <span className=\"fw6\">{field.label}:</span> {field.value}\n          </li>\n        ))\n      }\n    </ul>\n  </Card>\n);\n\nPokemonStatsCard.propTypes = {\n  title: PropTypes.string,\n  fields: PropTypes.array,\n};\n\nexport default PokemonStatsCard;\n","import React from 'react';\nimport { useAtomValue } from 'jotai';\nimport { selectedPokemonAtom } from 'state/atoms';\nimport PokemonStatsCard from './PokemonStatsCard';\n\nconst PokemonStats = () => {\n  const selectedPokemon = useAtomValue(selectedPokemonAtom);\n\n  return (\n    <div className=\"w-70-ns center-ns ph2 pa0-ns f6\">\n      <PokemonStatsCard\n        title=\"Profile\"\n        fields={[\n          { label: 'weight', value: `${selectedPokemon.weight / 10}kg` },\n          { label: 'height', value: `${selectedPokemon.height / 10}m` },\n          {\n            label: 'abilities',\n            value: selectedPokemon.abilities.map((ability) => ability.ability.name).join(', '),\n          },\n        ]}\n      />\n\n      <PokemonStatsCard\n        title=\"Base Stats\"\n        fields={selectedPokemon.stats.map((item) => ({\n          label: item.stat.name, value: item.base_stat,\n        }))}\n      />\n    </div>\n  );\n};\n\nexport default PokemonStats;\n","import React from 'react';\nimport { useAtomValue } from 'jotai';\nimport { selectedPokemonAtom } from 'state/atoms';\nimport { padString } from 'utils';\nimport PokemonType from './PokemonType';\nimport PokemonStats from './PokemonStats';\n\nconst PokemonDetails = () => {\n  const selectedPokemon = useAtomValue(selectedPokemonAtom);\n  const selectedPokemonId = padString(selectedPokemon.id);\n\n  return (\n    <div className=\"tc ttc ph2 pt3\">\n      <img\n        src={`${process.env.REACT_APP_POKE_IMG_BASE_URL}/${selectedPokemon.id}.svg`}\n        alt=\"pokemon\"\n        className=\"h5-l w5-l bg-near-white br-100 shadow-1\"\n      />\n\n      <h1 className=\"code ma0 f2\">\n        {selectedPokemon.name}\n        <span className=\"courier f5 db\">#{selectedPokemonId}</span>\n      </h1>\n\n      <PokemonType />\n      <PokemonStats />\n    </div>\n  );\n};\n\nexport default PokemonDetails;\n","const apiClient = {\n  get: async (url) => {\n    return fetch(url).then(async (response) => {\n      const data = await response.json();\n      return response.ok ? data : Promise.reject(data);\n    });\n  },\n  // post/put/delete not needed currently\n};\n\nexport default apiClient;\n","import { atom } from 'jotai';\nimport apiClient from 'api/api-client';\n\nexport const asyncPokemonListAtom = atom(async () => {\n  const response = await apiClient.get(`${process.env.REACT_APP_POKE_API_BASE_URL}?limit=151`);\n  const pokemonList = await Promise.all(response.results.map((item) => apiClient.get(item.url)));\n  return pokemonList;\n});\n\nexport const selectedPokemonAtom = atom({});\n\nexport const isPopupVisibleAtom = atom(false);\n","export const padString = (value, targetLength = 3, charToPad = '0', padPosition = 'start') => {\n  const str = value.toString();\n  const methodName = padPosition === 'start' ? 'padStart' : 'padEnd';\n  return str[methodName](targetLength, charToPad);\n};\n"],"names":["arePropsEqual","prevProps","nextProps","title","subtitle","Card","props","_jsx","className","style","containerStyle","onClick","onClickHandler","children","_jsxs","contentContainerStyle","titleStyle","subtitleStyle","imageSource","src","imageStyle","alt","textContentStyle","textContent","displayName","React","_badgeSize$props$size","concat","large","medium","small","size","backgroundColor","badgeStyle","label","POKEMON_TYPE_COLOR","normal","fire","water","grass","electric","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dark","dragon","steel","fairy","selectedPokemon","useAtomValue","selectedPokemonAtom","types","map","_ref","type","Badge","name","fields","field","value","PokemonStatsCard","weight","height","abilities","ability","join","stats","item","stat","base_stat","selectedPokemonId","padString","id","process","PokemonType","PokemonStats","apiClient","get","_get","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","url","wrap","_context2","prev","next","abrupt","fetch","then","_callee","response","data","_context","json","sent","ok","Promise","reject","stop","_x2","apply","arguments","_x","asyncPokemonListAtom","atom","pokemonList","all","results","isPopupVisibleAtom","targetLength","length","undefined","charToPad","padPosition","toString"],"sourceRoot":""}